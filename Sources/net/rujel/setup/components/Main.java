// Generated by the WOLips Templateengine Plug-in at Jul 10, 2010 1:13:25 PM
package net.rujel.setup.components;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.*;
import net.rujel.reusables.*;

import java.io.*;
import java.text.FieldPosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;

import com.webobjects.eocontrol.*;


public class Main extends WOComponent {
	private static final long serialVersionUID = 1L;

	public Main(WOContext context) {
		super(context);
		String metaPath = System.getProperty("setupPath", "CONFIGDIR/app_setup");
		filePath = Various.convertFilePath(metaPath);
		File metalist = new File(filePath, "meta");
		File[] mlist = metalist.listFiles(PlistReader.Filter);
		if (mlist != null){
		for (int i = 0; i < mlist.length; i++) {
			try{
				FileInputStream pre = new FileInputStream(mlist[i]);
				NSData dat = new NSData(pre, 4096);
				NSDictionary lplist = (NSDictionary)NSPropertyListSerialization.propertyListFromData(dat, "UTF-8");
				metaPLists.addObject(lplist);
			}
			catch (Exception e) {
				System.out.println(e);
				e.printStackTrace();
			}
		}
		EOSortOrdering sort = EOSortOrdering.sortOrderingWithKey("sort", EOSortOrdering.CompareAscending);
		NSMutableArray sortOrderings = new NSMutableArray();
		sortOrderings.addObject(sort);
		EOSortOrdering.sortArrayUsingKeyOrderArray(metaPLists, sortOrderings);
		}
	}
	
	public Object item;
	public Object plist;		// :Object with plist
	public NSMutableArray<NSDictionary> metaPLists = new NSMutableArray();		//array with metaplists
	public String filePath;
	public NSMutableArray<NSDictionary> presets = new NSMutableArray();		//:array with presets
	public NSDictionary array;
	public File plistFile;
	
	public File defFolder() {
		return (File) session().valueForKey("targetfolder");
	}
	public void moveToOld() {

		File oldFolder = new File(defFolder(), "old");
		oldFolder.mkdir();
		
		StringBuffer buf = new StringBuffer(plistFile.getName());
		buf.delete(buf.length() -6, buf.length());
		buf.append('_');
		FieldPosition pos = new FieldPosition(SimpleDateFormat.YEAR_FIELD);
		SimpleDateFormat df = new SimpleDateFormat(System.getProperty("DATE_FORMAT", "dd-MM-yy_HH.mm"));
		df.format(new Date(), buf, pos);
		buf.append(".plist");
		File dest = new File(oldFolder, buf.toString());
		if(dest.exists())
			dest.delete();
		plistFile.renameTo(dest);
	}
	
	public WOActionResults restore() {
		try {
			String addres = (String) array.valueForKey("path");
			plistFile = new File(defFolder(), addres);
			FileInputStream pre = new FileInputStream(plistFile);
			NSData dat = new NSData(pre, 4096);
			plist = NSPropertyListSerialization.propertyListFromData(dat, "UTF-8");
		}
		catch (Exception e) {
			System.out.println("Файл не восстанавливается" + e);
		}
		check();
		return null;
	}
	
	public String status(){
		return (String) ((NSDictionary)item).valueForKey("status");
	}
	public boolean restorable() {
		String path = (String) ((NSDictionary)array).valueForKey("path");
		File file = new File(defFolder(), path);
		if (file.exists())
			return true;
		return false;
	}
	public boolean getOn() {
		String path = (String) ((NSDictionary)item).valueForKey("path");
		File file = new File(defFolder(), path);
		
		if (file.exists())
			return true;
		return false;
	}
	public String textColor() {
		if (getOn()) {
			return "background-color:#ccffcc; padding-left:1em;";
		}
		else if (! getOn() && ! "required".equals(status())) {
			return "background-color:#cccccc; padding-left:1em;";
		}
		return "background-color:#ffccaa; padding-left:1em;";
		
	}
	public void setOn(boolean on){
		if (getOn() && ! on){
			Off();
		}
		else if(on && ! getOn()) {
			makePlist();
			submit();
		}
	}
	public boolean disabled() {
		if (! getOn() && ! Various.boolForObject(((NSDictionary)item).valueForKey("advanced")))
			return true;
		return false;
	}
	public WOActionResults submitList() {
		plist=null;
		return null;
	}
	
	public boolean havePresets(){
		return presets.count() > 1;
	}
	
 	public boolean plistIsAdvanced() {
		return Various.boolForObject(array.valueForKey("advanced"));
	}
	public boolean isAdvanced() {
		return (Boolean) session().valueForKey("advanced");
	}
	public String color() {
		if ((Boolean)session().valueForKey("advanced")) {
			return "FFA500";
		}
		return "A9A9A9";
	}
	public WOActionResults change() {
		if ((Boolean)session().valueForKey("advanced")) {
			session().takeValueForKey(false, "advanced");
		}
		else {
			session().takeValueForKey(true, "advanced");
		}
		return null;
	}
	public String advButton() {
		if ((Boolean)session().valueForKey("advanced")) {
			return "Перейти в простой режим";
		}
		return "Перейти в режим эксперта";
	}
	public String regime() {
		if ((Boolean)session().valueForKey("advanced")) {
			return "Режим эксперта";
		}
		return "Простой режим";
	}

 	public String getName() {
		return  (String)((NSDictionary)item).valueForKey("title");
	}
		
	public void plistMaker(NSArray mpPlase, NSMutableDictionary dict) {
		Enumeration en = mpPlase.objectEnumerator();
		while (en.hasMoreElements()) {
			NSDictionary metaElement = (NSDictionary) en.nextElement();
			if (Various.boolForObject(metaElement.valueForKey("required"))) {
				dict.takeValueForKey(metaElement.valueForKey("defaultValue"), (String) metaElement.valueForKey("key"));
			}
			else if ("Dictionary".equals( ((String) metaElement.valueForKey("type")))) {
				NSMutableDictionary subdict = new NSMutableDictionary();
				dict.takeValueForKey(subdict, (String) metaElement.valueForKey("key"));
				plistMaker((NSArray) metaElement.valueForKey("keys"), subdict);
			}
		}
	}
	public WOActionResults makePlist() {
		array = (NSDictionary) item;
		presets.removeAllObjects();
		session().takeValueForKey(null, "message");
		
		if (array.valueForKey("presets") != null) {
			String setupPath = System.getProperty("setupPath", "CONFIGDIR/app_setup");
			String setupAddr = Various.convertFilePath(setupPath);
			String presetsAddres = (String)array.valueForKey("presets");
			File presetList = new File(setupAddr, presetsAddres);
			if (presetList.isDirectory()) {
				File[] preList = presetList.listFiles(PlistReader.Filter);
				
				for (int i = 0; i < preList.length; i++) {
					try{
						FileInputStream pre = new FileInputStream(preList[i]);
						NSData dat = new NSData(pre, 4096);
						NSDictionary lplist = (NSDictionary)NSPropertyListSerialization.propertyListFromData(dat, "UTF-8");
						presets.addObject(lplist);
					}
					catch (Exception e) {
						System.out.println("Файл не прочтен: " + e);
						e.printStackTrace();
					}
				}
				
			}
			else {
				try {
					FileInputStream pre = new FileInputStream(presetList);
					NSData dat = new NSData(pre, 4096);
					NSDictionary lplist = (NSDictionary)NSPropertyListSerialization.propertyListFromData(dat, "UTF-8");
					presets.addObject(lplist);
				}
				catch (Exception e) {
					System.out.println("Файл не прочтен: " + e);
					e.printStackTrace();
				}
			}
		}

		
		
		try {
			String addres = (String) array.valueForKey("path");
			plistFile = new File(defFolder(), addres);
			FileInputStream pre = new FileInputStream(plistFile);
			NSData dat = new NSData(pre, 4096);
			plist = NSPropertyListSerialization.propertyListFromData(dat, "UTF-8");
		}
		catch (Exception o) {
			if (presets.count()>0) {
				
				
				if (presets.count()>1) {
				
					Object defaultpreset = ((NSDictionary)item).valueForKey("defaultpreset");
					for (int i = 0; i < presets.count(); i++) {
						try{
							
							String title = (String) presets.get(i).valueForKey("title") ;
							if (title.equals(defaultpreset)) {
								plist = presets.get(i);
							}
						}
						catch (Exception e) {
							if (presets.get(i).valueForKey("title") != null) {
							System.out.println(e);
							e.printStackTrace();
							}	
						}
					}
					if (plist == null)
						plist = presets.get(0);
				
				}
				else 
					plist = presets.get(0);
				
			}
			else {
				plist = new NSMutableDictionary();
				plistMaker((NSArray) array.valueForKey("keys"), (NSMutableDictionary) plist);
			}
		}
		check();
		return null;
	}
	
	public WOActionResults submit() {
		if (check()){
			String xml = NSPropertyListSerialization.xmlStringFromPropertyList(plist);
			try {
				
				moveToOld();
				
				String modules = NSPathUtilities.stringByDeletingLastPathComponent(plistFile.getPath());
				File modulesFolder = new File(defFolder(), modules);
				modulesFolder.mkdirs();
				
				FileOutputStream pre = new FileOutputStream(plistFile);
				OutputStreamWriter dat = new OutputStreamWriter(pre, "UTF-8");
				dat.write(xml);
				dat.close();
				pre.close();
				session().takeValueForKey("Настройки сохранены", "message");
			}
			catch (Exception e) {
				session().takeValueForKey("Не удалось сохранить настройки", "message");
				System.out.println("Не удалось записать файл" + e);
				e.printStackTrace();
				
			}
		}
		return null;
	}
	public Boolean check() {
			Boolean checkResult = true;
			NSArray mPlace = (NSArray) array.valueForKey("keys");
			goCheck(mPlace, (NSDictionary) plist);
			if (session().valueForKey("message") != null) {
				checkResult = false;
			}
		return checkResult;
	}
	public void goCheck(NSArray mPlace, NSDictionary plPlace) {
		Enumeration en = mPlace.objectEnumerator();
		while (en.hasMoreElements()) {
			NSDictionary metaElement = (NSDictionary) en.nextElement();
			String key = (String) metaElement.valueForKey("key");
			Object keyVal = plPlace.valueForKey(key);
			Object metaKeyValMin = metaElement.valueForKey("min");
			Object metaKeyValMax = metaElement.valueForKey("max");
			metaElement.takeValueForKey(null, "exeption");
			if (Various.boolForObject(metaElement.valueForKey("required")) && keyVal == null) {
				session().takeValueForKey("Не верно заполнены поля", "message");
				metaElement.takeValueForKey("Должно быть заполнено", "exeption");
			}
			else if (metaKeyValMin != null && keyVal != null  && !(keyVal instanceof String) && ((Number)metaKeyValMin).intValue() > ((Number)keyVal).intValue()) {
				session().takeValueForKey("Не верно заполнены поля", "message");
				metaElement.takeValueForKey("Нарушены рамки предельных значений", "exeption");
			}
			else if (metaKeyValMax != null && keyVal != null && !(keyVal instanceof String) && ((Number)metaKeyValMax).intValue() < ((Number)keyVal).intValue()) {
				session().takeValueForKey("Не верно заполнены поля", "message");
				metaElement.takeValueForKey("Нарушены рамки предельных значений", "exeption");
			}
			else if ("Dictionary".equals( ((String) metaElement.valueForKey("type")))) {
				if (keyVal == null) {
					plPlace.takeValueForKey(new NSMutableDictionary(), key);
				}
				NSMutableDictionary subdict = (NSMutableDictionary) plPlace.valueForKey(key);
				NSArray submeta = (NSArray) metaElement.valueForKey("keys");
				if (submeta != null && submeta.count() != 0) {
					goCheck(submeta, subdict);
				}
			}
			else if ("Integer".equals(metaElement.valueForKey("type")) && keyVal != null) {
				try {
					Integer work = new Integer(keyVal.toString());
				} catch (Exception e) {
					session().takeValueForKey("Не верно заполнены поля", "message");
					metaElement.takeValueForKey("Здесь должно быть число", "exeption");
				}
			}
		}
	}
	public void Off() {
		String addres = (String) ((NSDictionary)item).valueForKey("path");
		plistFile = new File(defFolder(), addres);
		moveToOld();
	}
	public WOActionResults htmlCheck() {
		check();
		return null;
	}
}
